import numpy as np
import matplotlib.pyplot as plt
from lmfit import Minimizer, Parameters, report_fit
from astropy.io import fits
import csv
import os

# Define the 2D Gaussian function
def gaussian_2d(x, y, x0, y0, sigma, height, offset):
    return offset + height * np.exp(-(((x - x0) ** 2 + (y - y0) ** 2) / (2 * sigma ** 2)))

# Residuals to minimize relative to the error bars
def residual(params, x, y, data, error):
    x0 = params['x0']
    y0 = params['y0']
    sigma = params['sigma']
    height = params['height']
    offset = params['offset']
    
    model = gaussian_2d(x, y, x0, y0, sigma, height, offset)
    
    return (data - model) / error

# Function to calculate goodness of fit
def calculate_goodness_of_fit(data, model, error):
    residuals = data - model
    chi_squared = np.sum((residuals / error) ** 2)
    reduced_chi_squared = chi_squared / (data.size - 6)  # 6 parameters in the model
    r_squared = 1 - np.sum(residuals**2) / np.sum((data - np.mean(data))**2)
    return chi_squared, reduced_chi_squared, r_squared

# Function to load MUSE data from a FITS file
def load_muse_data(filename, wavelength_index):
    with fits.open(filename) as hdul:
        data = hdul[1].data  # Data is in the second HDU (index 1)
        uncertainties = hdul[2].data  # Uncertainties are in the third HDU (index 2)
    # Extract the slice for the given wavelength index
    return data[wavelength_index], uncertainties[wavelength_index]

# Function to plot the stellar spectrum
def plot_stellar_spectrum(wavelengths, intensities, star_id):
    # Filter out NaN values in intensities array
    valid_indices = ~np.isnan(intensities)
    valid_wavelengths = np.array(wavelengths)[valid_indices]
    valid_intensities = np.array(intensities)[valid_indices]

    plt.figure(figsize=(10, 6))
    plt.plot(valid_wavelengths, valid_intensities, marker='o', linestyle='-', color='b')
    plt.xlabel('Wavelength (Angstrom)')
    plt.ylabel('Intensity')
    plt.title(f'Single Pixel Stellar Spectrum for Star {star_id}')
    plt.grid(True)
    plt.show()

# Function to load saved fit results from CSV
def load_saved_fit_results(star_id, num_wavelengths):
    csv_filename = f'star_{star_id}_fit_results_pixel.csv'
    fitted_intensities = [np.nan] * num_wavelengths  # Initialize with NaNs
    fit_statistics = {'chi_squared': [np.nan] * num_wavelengths, 'reduced_chi_squared': [np.nan] * num_wavelengths, 'r_squared': [np.nan] * num_wavelengths}

    if os.path.exists(csv_filename):
        with open(csv_filename, 'r') as csvfile:
            reader = csv.DictReader(csvfile)
            for row in reader:
                idx = int(row['wavelength_index'])
                fitted_intensities[idx] = float(row['fitted_intensity'])
                fit_statistics['chi_squared'][idx] = float(row['chi_squared'])
                fit_statistics['reduced_chi_squared'][idx] = float(row['reduced_chi_squared'])
                fit_statistics['r_squared'][idx] = float(row['r_squared'])

    return fitted_intensities, fit_statistics

# Main script
if __name__ == "__main__":
    # FITS header values for the wavelength axis
    crval3 = 4700.0  # Starting wavelength (Angstrom)
    crpix3 = 1.0     # Reference pixel
    cd3_3 = 1.25     # Wavelength increment per pixel (Angstrom/pixel)

    # Calculate the wavelengths from the indices
    wavelengths = [crval3 + (i - crpix3) * cd3_3 for i in range(3681)]

    # Replace 'DATACUBE_595s.fits' with the actual file path
    filename = 'DATACUBE_595s.fits'
    # Define the coordinates for the stars
    stars = [((119,171), 119, 171), ((53, 140), 53, 140), ((139,193), 139, 193)]  # List of tuples (star_id, x0, y0)

    for star_id, x0, y0 in stars:
        fitted_intensities, fit_statistics = load_saved_fit_results(star_id, len(wavelengths))

        if all(np.isnan(fitted_intensities)):
            fitted_intensities = []  # List to store fitted intensities for the stellar spectrum
            fit_statistics = {'chi_squared': [], 'reduced_chi_squared': [], 'r_squared': []}  # Store fit statistics for averaging

            for wavelength_index in range(3681):
                # Skip the wavelength indices 886 to 1013
                if 886 <= wavelength_index <= 1013:
                    fitted_intensities.append(np.nan)  # Append NaN to keep the array length consistent
                    fit_statistics['chi_squared'].append(np.nan)
                    fit_statistics['reduced_chi_squared'].append(np.nan)
                    fit_statistics['r_squared'].append(np.nan)
                    continue

                try:
                    # Load the image data and uncertainties for the current wavelength
                    image_data, uncertainties = load_muse_data(filename, wavelength_index)

                    # Extract a 15x15 sub-image around the star
                    if y0-7 < 0 or y0+8 > image_data.shape[0] or x0-7 < 0 or x0+8 > image_data.shape[1]:
                        raise ValueError("Sub-image goes out of bounds")

                    sub_image = image_data[y0-7:y0+8, x0-7:x0+8]
                    sub_uncertainties = uncertainties[y0-7:y0+8, x0-7:x0+8]

                    if sub_image.shape != (15, 15) or sub_uncertainties.shape != (15, 15):
                        raise ValueError("Sub-image is not of shape (15, 15)")

                    # Calculate the standard deviation of the noise from a region in the data
                    noise_region = np.concatenate((
                        sub_image[:3, :3].flatten(),  # Top-left corner
                        sub_image[:3, -3:].flatten(),  # Top-right corner
                        sub_image[-3:, :3].flatten(),  # Bottom-left corner
                        sub_image[-3:, -3:].flatten()  # Bottom-right corner
                    ))
                    noise_std = np.std(noise_region)
                    print(f"Estimated noise standard deviation: {noise_std}")

                    # Fit the 2D Gaussian Model
                    x = np.linspace(0, 14, 15)
                    y = np.linspace(0, 14, 15)
                    X, Y = np.meshgrid(x, y)

                    # Improved initial parameter estimates
                    initial_x0 = np.argmax(np.sum(sub_image, axis=0))  # Initial guess for x0
                    initial_y0 = np.argmax(np.sum(sub_image, axis=1))  # Initial guess for y0
                    initial_height = sub_image[initial_y0, initial_x0]  # Initial guess for height
                    initial_offset = np.median(sub_image)  # Initial guess for offset

                    params = Parameters()
                    params.add('x0', value=initial_x0)
                    params.add('y0', value=initial_y0)
                    params.add('sigma', value=1)
                    params.add('height', value=initial_height)
                    params.add('offset', value=initial_offset)

                    minner = Minimizer(residual, params, fcn_args=(X, Y, sub_image, noise_std))
                    result = minner.minimize()

                    report_fit(result)

                    fit = result.params.valuesdict()
                    print(fit)

                    if fit['height'] >= 10000:
                        fitted_intensities.append(np.nan)  # Append NaN to keep the array length consistent
                        fit_statistics['chi_squared'].append(np.nan)
                        fit_statistics['reduced_chi_squared'].append(np.nan)
                        fit_statistics['r_squared'].append(np.nan)
                        continue

                    model = gaussian_2d(X, Y, fit['x0'], fit['y0'], fit['sigma'], fit['height'], fit['offset'])

                    # Extract the intensity from the center pixel of the Gaussian fit
                    center_x, center_y = int(fit['x0']), int(fit['y0'])
                    intensity = model[center_y, center_x]

                    chi_squared, reduced_chi_squared, r_squared = calculate_goodness_of_fit(sub_image, model, noise_std)

                    print(f"Chi-squared: {chi_squared}")
                    print(f"Reduced Chi-squared: {reduced_chi_squared}")
                    print(f"R-squared: {r_squared}")

                    # Save the intensity for this wavelength
                    fitted_intensities.append(intensity)

                    # Store fit statistics
                    fit_statistics['chi_squared'].append(chi_squared)
                    fit_statistics['reduced_chi_squared'].append(reduced_chi_squared)
                    fit_statistics['r_squared'].append(r_squared)

                    # Save fit results to CSV file
                    with open(f'star_{star_id}_fit_results_pixel.csv', mode='w', newline='') as csvfile:
                        fieldnames = ['wavelength_index', 'fitted_intensity', 'chi_squared', 'reduced_chi_squared', 'r_squared']
                        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
                        writer.writeheader()
                        for idx, intensity in enumerate(fitted_intensities):
                            writer.writerow({
                                'wavelength_index': idx,
                                'fitted_intensity': intensity,
                                'chi_squared': fit_statistics['chi_squared'][idx],
                                'reduced_chi_squared': fit_statistics['reduced_chi_squared'][idx],
                                'r_squared': fit_statistics['r_squared'][idx]
                            })

                except Exception as e:
                    print(f"Error processing star {star_id} at wavelength index {wavelength_index}: {e}")
                    fitted_intensities.append(np.nan)  # Append NaN if there's an error
                    fit_statistics['chi_squared'].append(np.nan)
                    fit_statistics['reduced_chi_squared'].append(np.nan)
                    fit_statistics['r_squared'].append(np.nan)

            # Plot the resulting stellar spectrum
            plot_stellar_spectrum(wavelengths, fitted_intensities, star_id)

        else:
            # If fitted intensities are already loaded, plot the spectrum
            plot_stellar_spectrum(wavelengths, fitted_intensities, star_id)
